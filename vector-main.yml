# Source: Defines where your logs are coming from
sources:
  my_source:
    type: file
    include:
      - /var/log/my_app.log

# Transforms: Apply the VRL scripts you've created to detect different malicious activities
transforms:
detect_port_scanning:
  type: remap
  inputs: ["my_source"]
  source: |
    .port_scan_threshold = 10
    .ports_accessed = split(get_env_var("PORTS_ACCESSED") ?? "", ",")
    
    .destination_port_str, err = to_string(.destination_port)
    if err == null && !includes(.ports_accessed, .destination_port_str) {
      .ports_accessed = array_append(.ports_accessed, .destination_port_str)
      set_env_var("PORTS_ACCESSED", join(.ports_accessed, ","))
    }

    if length(.ports_accessed) > .port_scan_threshold {
      .anomaly_detected = true
      .anomaly_type = "Port Scanning Detected"
      .ports_accessed = []  # Reset ports list
    }

detect_forbidden_ip_addresses:
  type: remap
  inputs: ["my_source"]
  source: |
    .bad_ips = ["192.168.0.1", "10.0.0.5"]

    if contains(.bad_ips, .source_ip) {
      .anomaly_detected = true
      .anomaly_type = "Suspicious IP Address"
    }

detect_unauthorized_roles:
  type: remap
  inputs: ["my_source"]
  source: |
    .authorized_roles = ["admin", "file_owner", "backup_service"]
    .file_path = parse_regex(.message, r"path=([^ ]+)").file_path
    .role = parse_regex(.message, r"role=([^ ]+)").role

    if !includes(.authorized_roles, .role) {
      .anomaly_detected = true
      .anomaly_type = "Unauthorized File Access"
      .unauthorized_role = .role
      .accessed_file = .file_path
    }

detect_multiple_failed_login_attempts:
  type: remap
  inputs: ["my_source"]
  source: |
    .failed_attempts, err = to_int(.failed_attempts)
    if err != null {
      .failed_attempts = 0
    }

    if .status == "failed" && .event_type == "login" {
      .failed_attempts = .failed_attempts + 1
      set_env_var("FAILED_ATTEMPTS", .failed_attempts)
    }

    if .failed_attempts > 5 {
      .anomaly_detected = true
      .anomaly_type = "Multiple Failed Login Attempts"
      .failed_attempts = 0  # Reset counter
    }

# Sink: Where the processed logs are sent
sinks:
  my_sink:
    type: console
    inputs:
      - detect_port_scanning
      - detect_forbidden_ip_addresses
      - detect_unauthorized_roles
      - detect_multiple_failed_login_attempts
    encoding:
      codec: json